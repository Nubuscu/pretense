// Code generated by ent, DO NOT EDIT.

package ent

import (
	"errors"
	"fmt"
	"nubuscu/pretense/ent/album"
	"nubuscu/pretense/ent/artist"
	"nubuscu/pretense/ent/predicate"
	"nubuscu/pretense/ent/review"
	"nubuscu/pretense/ent/tag"
	"nubuscu/pretense/ent/topic"
	"time"
)

// AlbumWhereInput represents a where input for filtering Album queries.
type AlbumWhereInput struct {
	Predicates []predicate.Album  `json:"-"`
	Not        *AlbumWhereInput   `json:"not,omitempty"`
	Or         []*AlbumWhereInput `json:"or,omitempty"`
	And        []*AlbumWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "spotify_url" field predicates.
	SpotifyURL             *string  `json:"spotifyURL,omitempty"`
	SpotifyURLNEQ          *string  `json:"spotifyURLNEQ,omitempty"`
	SpotifyURLIn           []string `json:"spotifyURLIn,omitempty"`
	SpotifyURLNotIn        []string `json:"spotifyURLNotIn,omitempty"`
	SpotifyURLGT           *string  `json:"spotifyURLGT,omitempty"`
	SpotifyURLGTE          *string  `json:"spotifyURLGTE,omitempty"`
	SpotifyURLLT           *string  `json:"spotifyURLLT,omitempty"`
	SpotifyURLLTE          *string  `json:"spotifyURLLTE,omitempty"`
	SpotifyURLContains     *string  `json:"spotifyURLContains,omitempty"`
	SpotifyURLHasPrefix    *string  `json:"spotifyURLHasPrefix,omitempty"`
	SpotifyURLHasSuffix    *string  `json:"spotifyURLHasSuffix,omitempty"`
	SpotifyURLEqualFold    *string  `json:"spotifyURLEqualFold,omitempty"`
	SpotifyURLContainsFold *string  `json:"spotifyURLContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "by" edge predicates.
	HasBy     *bool               `json:"hasBy,omitempty"`
	HasByWith []*ArtistWhereInput `json:"hasByWith,omitempty"`

	// "included_in" edge predicates.
	HasIncludedIn     *bool              `json:"hasIncludedIn,omitempty"`
	HasIncludedInWith []*TopicWhereInput `json:"hasIncludedInWith,omitempty"`

	// "tagged_with" edge predicates.
	HasTaggedWith     *bool            `json:"hasTaggedWith,omitempty"`
	HasTaggedWithWith []*TagWhereInput `json:"hasTaggedWithWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *AlbumWhereInput) AddPredicates(predicates ...predicate.Album) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the AlbumWhereInput filter on the AlbumQuery builder.
func (i *AlbumWhereInput) Filter(q *AlbumQuery) (*AlbumQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyAlbumWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyAlbumWhereInput is returned in case the AlbumWhereInput is empty.
var ErrEmptyAlbumWhereInput = errors.New("ent: empty predicate AlbumWhereInput")

// P returns a predicate for filtering albums.
// An error is returned if the input is empty or invalid.
func (i *AlbumWhereInput) P() (predicate.Album, error) {
	var predicates []predicate.Album
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, album.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Album, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, album.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Album, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, album.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, album.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, album.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, album.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, album.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, album.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, album.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, album.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, album.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, album.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, album.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, album.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, album.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, album.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, album.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, album.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, album.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, album.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, album.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, album.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, album.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, album.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, album.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, album.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, album.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.SpotifyURL != nil {
		predicates = append(predicates, album.SpotifyURLEQ(*i.SpotifyURL))
	}
	if i.SpotifyURLNEQ != nil {
		predicates = append(predicates, album.SpotifyURLNEQ(*i.SpotifyURLNEQ))
	}
	if len(i.SpotifyURLIn) > 0 {
		predicates = append(predicates, album.SpotifyURLIn(i.SpotifyURLIn...))
	}
	if len(i.SpotifyURLNotIn) > 0 {
		predicates = append(predicates, album.SpotifyURLNotIn(i.SpotifyURLNotIn...))
	}
	if i.SpotifyURLGT != nil {
		predicates = append(predicates, album.SpotifyURLGT(*i.SpotifyURLGT))
	}
	if i.SpotifyURLGTE != nil {
		predicates = append(predicates, album.SpotifyURLGTE(*i.SpotifyURLGTE))
	}
	if i.SpotifyURLLT != nil {
		predicates = append(predicates, album.SpotifyURLLT(*i.SpotifyURLLT))
	}
	if i.SpotifyURLLTE != nil {
		predicates = append(predicates, album.SpotifyURLLTE(*i.SpotifyURLLTE))
	}
	if i.SpotifyURLContains != nil {
		predicates = append(predicates, album.SpotifyURLContains(*i.SpotifyURLContains))
	}
	if i.SpotifyURLHasPrefix != nil {
		predicates = append(predicates, album.SpotifyURLHasPrefix(*i.SpotifyURLHasPrefix))
	}
	if i.SpotifyURLHasSuffix != nil {
		predicates = append(predicates, album.SpotifyURLHasSuffix(*i.SpotifyURLHasSuffix))
	}
	if i.SpotifyURLEqualFold != nil {
		predicates = append(predicates, album.SpotifyURLEqualFold(*i.SpotifyURLEqualFold))
	}
	if i.SpotifyURLContainsFold != nil {
		predicates = append(predicates, album.SpotifyURLContainsFold(*i.SpotifyURLContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, album.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, album.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, album.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, album.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, album.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, album.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, album.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, album.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, album.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, album.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, album.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, album.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, album.NameContainsFold(*i.NameContainsFold))
	}

	if i.HasBy != nil {
		p := album.HasBy()
		if !*i.HasBy {
			p = album.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasByWith) > 0 {
		with := make([]predicate.Artist, 0, len(i.HasByWith))
		for _, w := range i.HasByWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasByWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, album.HasByWith(with...))
	}
	if i.HasIncludedIn != nil {
		p := album.HasIncludedIn()
		if !*i.HasIncludedIn {
			p = album.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasIncludedInWith) > 0 {
		with := make([]predicate.Topic, 0, len(i.HasIncludedInWith))
		for _, w := range i.HasIncludedInWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasIncludedInWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, album.HasIncludedInWith(with...))
	}
	if i.HasTaggedWith != nil {
		p := album.HasTaggedWith()
		if !*i.HasTaggedWith {
			p = album.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaggedWithWith) > 0 {
		with := make([]predicate.Tag, 0, len(i.HasTaggedWithWith))
		for _, w := range i.HasTaggedWithWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTaggedWithWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, album.HasTaggedWithWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyAlbumWhereInput
	case 1:
		return predicates[0], nil
	default:
		return album.And(predicates...), nil
	}
}

// ArtistWhereInput represents a where input for filtering Artist queries.
type ArtistWhereInput struct {
	Predicates []predicate.Artist  `json:"-"`
	Not        *ArtistWhereInput   `json:"not,omitempty"`
	Or         []*ArtistWhereInput `json:"or,omitempty"`
	And        []*ArtistWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "spotify_url" field predicates.
	SpotifyURL             *string  `json:"spotifyURL,omitempty"`
	SpotifyURLNEQ          *string  `json:"spotifyURLNEQ,omitempty"`
	SpotifyURLIn           []string `json:"spotifyURLIn,omitempty"`
	SpotifyURLNotIn        []string `json:"spotifyURLNotIn,omitempty"`
	SpotifyURLGT           *string  `json:"spotifyURLGT,omitempty"`
	SpotifyURLGTE          *string  `json:"spotifyURLGTE,omitempty"`
	SpotifyURLLT           *string  `json:"spotifyURLLT,omitempty"`
	SpotifyURLLTE          *string  `json:"spotifyURLLTE,omitempty"`
	SpotifyURLContains     *string  `json:"spotifyURLContains,omitempty"`
	SpotifyURLHasPrefix    *string  `json:"spotifyURLHasPrefix,omitempty"`
	SpotifyURLHasSuffix    *string  `json:"spotifyURLHasSuffix,omitempty"`
	SpotifyURLEqualFold    *string  `json:"spotifyURLEqualFold,omitempty"`
	SpotifyURLContainsFold *string  `json:"spotifyURLContainsFold,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "wrote" edge predicates.
	HasWrote     *bool              `json:"hasWrote,omitempty"`
	HasWroteWith []*AlbumWhereInput `json:"hasWroteWith,omitempty"`

	// "tagged_with" edge predicates.
	HasTaggedWith     *bool            `json:"hasTaggedWith,omitempty"`
	HasTaggedWithWith []*TagWhereInput `json:"hasTaggedWithWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ArtistWhereInput) AddPredicates(predicates ...predicate.Artist) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ArtistWhereInput filter on the ArtistQuery builder.
func (i *ArtistWhereInput) Filter(q *ArtistQuery) (*ArtistQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyArtistWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyArtistWhereInput is returned in case the ArtistWhereInput is empty.
var ErrEmptyArtistWhereInput = errors.New("ent: empty predicate ArtistWhereInput")

// P returns a predicate for filtering artists.
// An error is returned if the input is empty or invalid.
func (i *ArtistWhereInput) P() (predicate.Artist, error) {
	var predicates []predicate.Artist
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, artist.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Artist, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, artist.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Artist, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, artist.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, artist.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, artist.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, artist.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, artist.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, artist.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, artist.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, artist.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, artist.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, artist.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, artist.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, artist.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, artist.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, artist.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, artist.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, artist.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, artist.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, artist.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, artist.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, artist.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, artist.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, artist.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, artist.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, artist.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, artist.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.SpotifyURL != nil {
		predicates = append(predicates, artist.SpotifyURLEQ(*i.SpotifyURL))
	}
	if i.SpotifyURLNEQ != nil {
		predicates = append(predicates, artist.SpotifyURLNEQ(*i.SpotifyURLNEQ))
	}
	if len(i.SpotifyURLIn) > 0 {
		predicates = append(predicates, artist.SpotifyURLIn(i.SpotifyURLIn...))
	}
	if len(i.SpotifyURLNotIn) > 0 {
		predicates = append(predicates, artist.SpotifyURLNotIn(i.SpotifyURLNotIn...))
	}
	if i.SpotifyURLGT != nil {
		predicates = append(predicates, artist.SpotifyURLGT(*i.SpotifyURLGT))
	}
	if i.SpotifyURLGTE != nil {
		predicates = append(predicates, artist.SpotifyURLGTE(*i.SpotifyURLGTE))
	}
	if i.SpotifyURLLT != nil {
		predicates = append(predicates, artist.SpotifyURLLT(*i.SpotifyURLLT))
	}
	if i.SpotifyURLLTE != nil {
		predicates = append(predicates, artist.SpotifyURLLTE(*i.SpotifyURLLTE))
	}
	if i.SpotifyURLContains != nil {
		predicates = append(predicates, artist.SpotifyURLContains(*i.SpotifyURLContains))
	}
	if i.SpotifyURLHasPrefix != nil {
		predicates = append(predicates, artist.SpotifyURLHasPrefix(*i.SpotifyURLHasPrefix))
	}
	if i.SpotifyURLHasSuffix != nil {
		predicates = append(predicates, artist.SpotifyURLHasSuffix(*i.SpotifyURLHasSuffix))
	}
	if i.SpotifyURLEqualFold != nil {
		predicates = append(predicates, artist.SpotifyURLEqualFold(*i.SpotifyURLEqualFold))
	}
	if i.SpotifyURLContainsFold != nil {
		predicates = append(predicates, artist.SpotifyURLContainsFold(*i.SpotifyURLContainsFold))
	}
	if i.Name != nil {
		predicates = append(predicates, artist.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, artist.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, artist.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, artist.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, artist.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, artist.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, artist.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, artist.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, artist.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, artist.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, artist.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, artist.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, artist.NameContainsFold(*i.NameContainsFold))
	}

	if i.HasWrote != nil {
		p := artist.HasWrote()
		if !*i.HasWrote {
			p = artist.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasWroteWith) > 0 {
		with := make([]predicate.Album, 0, len(i.HasWroteWith))
		for _, w := range i.HasWroteWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasWroteWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, artist.HasWroteWith(with...))
	}
	if i.HasTaggedWith != nil {
		p := artist.HasTaggedWith()
		if !*i.HasTaggedWith {
			p = artist.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaggedWithWith) > 0 {
		with := make([]predicate.Tag, 0, len(i.HasTaggedWithWith))
		for _, w := range i.HasTaggedWithWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTaggedWithWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, artist.HasTaggedWithWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyArtistWhereInput
	case 1:
		return predicates[0], nil
	default:
		return artist.And(predicates...), nil
	}
}

// ReviewWhereInput represents a where input for filtering Review queries.
type ReviewWhereInput struct {
	Predicates []predicate.Review  `json:"-"`
	Not        *ReviewWhereInput   `json:"not,omitempty"`
	Or         []*ReviewWhereInput `json:"or,omitempty"`
	And        []*ReviewWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "body" field predicates.
	Body             *string  `json:"body,omitempty"`
	BodyNEQ          *string  `json:"bodyNEQ,omitempty"`
	BodyIn           []string `json:"bodyIn,omitempty"`
	BodyNotIn        []string `json:"bodyNotIn,omitempty"`
	BodyGT           *string  `json:"bodyGT,omitempty"`
	BodyGTE          *string  `json:"bodyGTE,omitempty"`
	BodyLT           *string  `json:"bodyLT,omitempty"`
	BodyLTE          *string  `json:"bodyLTE,omitempty"`
	BodyContains     *string  `json:"bodyContains,omitempty"`
	BodyHasPrefix    *string  `json:"bodyHasPrefix,omitempty"`
	BodyHasSuffix    *string  `json:"bodyHasSuffix,omitempty"`
	BodyEqualFold    *string  `json:"bodyEqualFold,omitempty"`
	BodyContainsFold *string  `json:"bodyContainsFold,omitempty"`

	// "reviews" edge predicates.
	HasReviews     *bool              `json:"hasReviews,omitempty"`
	HasReviewsWith []*TopicWhereInput `json:"hasReviewsWith,omitempty"`

	// "tagged_with" edge predicates.
	HasTaggedWith     *bool            `json:"hasTaggedWith,omitempty"`
	HasTaggedWithWith []*TagWhereInput `json:"hasTaggedWithWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *ReviewWhereInput) AddPredicates(predicates ...predicate.Review) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the ReviewWhereInput filter on the ReviewQuery builder.
func (i *ReviewWhereInput) Filter(q *ReviewQuery) (*ReviewQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyReviewWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyReviewWhereInput is returned in case the ReviewWhereInput is empty.
var ErrEmptyReviewWhereInput = errors.New("ent: empty predicate ReviewWhereInput")

// P returns a predicate for filtering reviews.
// An error is returned if the input is empty or invalid.
func (i *ReviewWhereInput) P() (predicate.Review, error) {
	var predicates []predicate.Review
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, review.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Review, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, review.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Review, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, review.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, review.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, review.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, review.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, review.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, review.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, review.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, review.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, review.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, review.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, review.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, review.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, review.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, review.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, review.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, review.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, review.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, review.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, review.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, review.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, review.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, review.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, review.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, review.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, review.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, review.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, review.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, review.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, review.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, review.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, review.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, review.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, review.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, review.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, review.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, review.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, review.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, review.NameContainsFold(*i.NameContainsFold))
	}
	if i.Body != nil {
		predicates = append(predicates, review.BodyEQ(*i.Body))
	}
	if i.BodyNEQ != nil {
		predicates = append(predicates, review.BodyNEQ(*i.BodyNEQ))
	}
	if len(i.BodyIn) > 0 {
		predicates = append(predicates, review.BodyIn(i.BodyIn...))
	}
	if len(i.BodyNotIn) > 0 {
		predicates = append(predicates, review.BodyNotIn(i.BodyNotIn...))
	}
	if i.BodyGT != nil {
		predicates = append(predicates, review.BodyGT(*i.BodyGT))
	}
	if i.BodyGTE != nil {
		predicates = append(predicates, review.BodyGTE(*i.BodyGTE))
	}
	if i.BodyLT != nil {
		predicates = append(predicates, review.BodyLT(*i.BodyLT))
	}
	if i.BodyLTE != nil {
		predicates = append(predicates, review.BodyLTE(*i.BodyLTE))
	}
	if i.BodyContains != nil {
		predicates = append(predicates, review.BodyContains(*i.BodyContains))
	}
	if i.BodyHasPrefix != nil {
		predicates = append(predicates, review.BodyHasPrefix(*i.BodyHasPrefix))
	}
	if i.BodyHasSuffix != nil {
		predicates = append(predicates, review.BodyHasSuffix(*i.BodyHasSuffix))
	}
	if i.BodyEqualFold != nil {
		predicates = append(predicates, review.BodyEqualFold(*i.BodyEqualFold))
	}
	if i.BodyContainsFold != nil {
		predicates = append(predicates, review.BodyContainsFold(*i.BodyContainsFold))
	}

	if i.HasReviews != nil {
		p := review.HasReviews()
		if !*i.HasReviews {
			p = review.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasReviewsWith) > 0 {
		with := make([]predicate.Topic, 0, len(i.HasReviewsWith))
		for _, w := range i.HasReviewsWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasReviewsWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, review.HasReviewsWith(with...))
	}
	if i.HasTaggedWith != nil {
		p := review.HasTaggedWith()
		if !*i.HasTaggedWith {
			p = review.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaggedWithWith) > 0 {
		with := make([]predicate.Tag, 0, len(i.HasTaggedWithWith))
		for _, w := range i.HasTaggedWithWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTaggedWithWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, review.HasTaggedWithWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyReviewWhereInput
	case 1:
		return predicates[0], nil
	default:
		return review.And(predicates...), nil
	}
}

// TagWhereInput represents a where input for filtering Tag queries.
type TagWhereInput struct {
	Predicates []predicate.Tag  `json:"-"`
	Not        *TagWhereInput   `json:"not,omitempty"`
	Or         []*TagWhereInput `json:"or,omitempty"`
	And        []*TagWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "key" field predicates.
	Key             *string  `json:"key,omitempty"`
	KeyNEQ          *string  `json:"keyNEQ,omitempty"`
	KeyIn           []string `json:"keyIn,omitempty"`
	KeyNotIn        []string `json:"keyNotIn,omitempty"`
	KeyGT           *string  `json:"keyGT,omitempty"`
	KeyGTE          *string  `json:"keyGTE,omitempty"`
	KeyLT           *string  `json:"keyLT,omitempty"`
	KeyLTE          *string  `json:"keyLTE,omitempty"`
	KeyContains     *string  `json:"keyContains,omitempty"`
	KeyHasPrefix    *string  `json:"keyHasPrefix,omitempty"`
	KeyHasSuffix    *string  `json:"keyHasSuffix,omitempty"`
	KeyEqualFold    *string  `json:"keyEqualFold,omitempty"`
	KeyContainsFold *string  `json:"keyContainsFold,omitempty"`

	// "value" field predicates.
	Value             *string  `json:"value,omitempty"`
	ValueNEQ          *string  `json:"valueNEQ,omitempty"`
	ValueIn           []string `json:"valueIn,omitempty"`
	ValueNotIn        []string `json:"valueNotIn,omitempty"`
	ValueGT           *string  `json:"valueGT,omitempty"`
	ValueGTE          *string  `json:"valueGTE,omitempty"`
	ValueLT           *string  `json:"valueLT,omitempty"`
	ValueLTE          *string  `json:"valueLTE,omitempty"`
	ValueContains     *string  `json:"valueContains,omitempty"`
	ValueHasPrefix    *string  `json:"valueHasPrefix,omitempty"`
	ValueHasSuffix    *string  `json:"valueHasSuffix,omitempty"`
	ValueEqualFold    *string  `json:"valueEqualFold,omitempty"`
	ValueContainsFold *string  `json:"valueContainsFold,omitempty"`

	// "tags_album" edge predicates.
	HasTagsAlbum     *bool              `json:"hasTagsAlbum,omitempty"`
	HasTagsAlbumWith []*AlbumWhereInput `json:"hasTagsAlbumWith,omitempty"`

	// "tags_artist" edge predicates.
	HasTagsArtist     *bool               `json:"hasTagsArtist,omitempty"`
	HasTagsArtistWith []*ArtistWhereInput `json:"hasTagsArtistWith,omitempty"`

	// "tags_review" edge predicates.
	HasTagsReview     *bool               `json:"hasTagsReview,omitempty"`
	HasTagsReviewWith []*ReviewWhereInput `json:"hasTagsReviewWith,omitempty"`

	// "tags_topic" edge predicates.
	HasTagsTopic     *bool              `json:"hasTagsTopic,omitempty"`
	HasTagsTopicWith []*TopicWhereInput `json:"hasTagsTopicWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TagWhereInput) AddPredicates(predicates ...predicate.Tag) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TagWhereInput filter on the TagQuery builder.
func (i *TagWhereInput) Filter(q *TagQuery) (*TagQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTagWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTagWhereInput is returned in case the TagWhereInput is empty.
var ErrEmptyTagWhereInput = errors.New("ent: empty predicate TagWhereInput")

// P returns a predicate for filtering tags.
// An error is returned if the input is empty or invalid.
func (i *TagWhereInput) P() (predicate.Tag, error) {
	var predicates []predicate.Tag
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, tag.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Tag, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, tag.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Tag, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, tag.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, tag.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, tag.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, tag.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, tag.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, tag.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, tag.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, tag.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, tag.IDLTE(*i.IDLTE))
	}
	if i.Key != nil {
		predicates = append(predicates, tag.KeyEQ(*i.Key))
	}
	if i.KeyNEQ != nil {
		predicates = append(predicates, tag.KeyNEQ(*i.KeyNEQ))
	}
	if len(i.KeyIn) > 0 {
		predicates = append(predicates, tag.KeyIn(i.KeyIn...))
	}
	if len(i.KeyNotIn) > 0 {
		predicates = append(predicates, tag.KeyNotIn(i.KeyNotIn...))
	}
	if i.KeyGT != nil {
		predicates = append(predicates, tag.KeyGT(*i.KeyGT))
	}
	if i.KeyGTE != nil {
		predicates = append(predicates, tag.KeyGTE(*i.KeyGTE))
	}
	if i.KeyLT != nil {
		predicates = append(predicates, tag.KeyLT(*i.KeyLT))
	}
	if i.KeyLTE != nil {
		predicates = append(predicates, tag.KeyLTE(*i.KeyLTE))
	}
	if i.KeyContains != nil {
		predicates = append(predicates, tag.KeyContains(*i.KeyContains))
	}
	if i.KeyHasPrefix != nil {
		predicates = append(predicates, tag.KeyHasPrefix(*i.KeyHasPrefix))
	}
	if i.KeyHasSuffix != nil {
		predicates = append(predicates, tag.KeyHasSuffix(*i.KeyHasSuffix))
	}
	if i.KeyEqualFold != nil {
		predicates = append(predicates, tag.KeyEqualFold(*i.KeyEqualFold))
	}
	if i.KeyContainsFold != nil {
		predicates = append(predicates, tag.KeyContainsFold(*i.KeyContainsFold))
	}
	if i.Value != nil {
		predicates = append(predicates, tag.ValueEQ(*i.Value))
	}
	if i.ValueNEQ != nil {
		predicates = append(predicates, tag.ValueNEQ(*i.ValueNEQ))
	}
	if len(i.ValueIn) > 0 {
		predicates = append(predicates, tag.ValueIn(i.ValueIn...))
	}
	if len(i.ValueNotIn) > 0 {
		predicates = append(predicates, tag.ValueNotIn(i.ValueNotIn...))
	}
	if i.ValueGT != nil {
		predicates = append(predicates, tag.ValueGT(*i.ValueGT))
	}
	if i.ValueGTE != nil {
		predicates = append(predicates, tag.ValueGTE(*i.ValueGTE))
	}
	if i.ValueLT != nil {
		predicates = append(predicates, tag.ValueLT(*i.ValueLT))
	}
	if i.ValueLTE != nil {
		predicates = append(predicates, tag.ValueLTE(*i.ValueLTE))
	}
	if i.ValueContains != nil {
		predicates = append(predicates, tag.ValueContains(*i.ValueContains))
	}
	if i.ValueHasPrefix != nil {
		predicates = append(predicates, tag.ValueHasPrefix(*i.ValueHasPrefix))
	}
	if i.ValueHasSuffix != nil {
		predicates = append(predicates, tag.ValueHasSuffix(*i.ValueHasSuffix))
	}
	if i.ValueEqualFold != nil {
		predicates = append(predicates, tag.ValueEqualFold(*i.ValueEqualFold))
	}
	if i.ValueContainsFold != nil {
		predicates = append(predicates, tag.ValueContainsFold(*i.ValueContainsFold))
	}

	if i.HasTagsAlbum != nil {
		p := tag.HasTagsAlbum()
		if !*i.HasTagsAlbum {
			p = tag.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTagsAlbumWith) > 0 {
		with := make([]predicate.Album, 0, len(i.HasTagsAlbumWith))
		for _, w := range i.HasTagsAlbumWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTagsAlbumWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tag.HasTagsAlbumWith(with...))
	}
	if i.HasTagsArtist != nil {
		p := tag.HasTagsArtist()
		if !*i.HasTagsArtist {
			p = tag.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTagsArtistWith) > 0 {
		with := make([]predicate.Artist, 0, len(i.HasTagsArtistWith))
		for _, w := range i.HasTagsArtistWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTagsArtistWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tag.HasTagsArtistWith(with...))
	}
	if i.HasTagsReview != nil {
		p := tag.HasTagsReview()
		if !*i.HasTagsReview {
			p = tag.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTagsReviewWith) > 0 {
		with := make([]predicate.Review, 0, len(i.HasTagsReviewWith))
		for _, w := range i.HasTagsReviewWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTagsReviewWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tag.HasTagsReviewWith(with...))
	}
	if i.HasTagsTopic != nil {
		p := tag.HasTagsTopic()
		if !*i.HasTagsTopic {
			p = tag.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTagsTopicWith) > 0 {
		with := make([]predicate.Topic, 0, len(i.HasTagsTopicWith))
		for _, w := range i.HasTagsTopicWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTagsTopicWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, tag.HasTagsTopicWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTagWhereInput
	case 1:
		return predicates[0], nil
	default:
		return tag.And(predicates...), nil
	}
}

// TopicWhereInput represents a where input for filtering Topic queries.
type TopicWhereInput struct {
	Predicates []predicate.Topic  `json:"-"`
	Not        *TopicWhereInput   `json:"not,omitempty"`
	Or         []*TopicWhereInput `json:"or,omitempty"`
	And        []*TopicWhereInput `json:"and,omitempty"`

	// "id" field predicates.
	ID      *int  `json:"id,omitempty"`
	IDNEQ   *int  `json:"idNEQ,omitempty"`
	IDIn    []int `json:"idIn,omitempty"`
	IDNotIn []int `json:"idNotIn,omitempty"`
	IDGT    *int  `json:"idGT,omitempty"`
	IDGTE   *int  `json:"idGTE,omitempty"`
	IDLT    *int  `json:"idLT,omitempty"`
	IDLTE   *int  `json:"idLTE,omitempty"`

	// "created_at" field predicates.
	CreatedAt      *time.Time  `json:"createdAt,omitempty"`
	CreatedAtNEQ   *time.Time  `json:"createdAtNEQ,omitempty"`
	CreatedAtIn    []time.Time `json:"createdAtIn,omitempty"`
	CreatedAtNotIn []time.Time `json:"createdAtNotIn,omitempty"`
	CreatedAtGT    *time.Time  `json:"createdAtGT,omitempty"`
	CreatedAtGTE   *time.Time  `json:"createdAtGTE,omitempty"`
	CreatedAtLT    *time.Time  `json:"createdAtLT,omitempty"`
	CreatedAtLTE   *time.Time  `json:"createdAtLTE,omitempty"`

	// "updated_at" field predicates.
	UpdatedAt      *time.Time  `json:"updatedAt,omitempty"`
	UpdatedAtNEQ   *time.Time  `json:"updatedAtNEQ,omitempty"`
	UpdatedAtIn    []time.Time `json:"updatedAtIn,omitempty"`
	UpdatedAtNotIn []time.Time `json:"updatedAtNotIn,omitempty"`
	UpdatedAtGT    *time.Time  `json:"updatedAtGT,omitempty"`
	UpdatedAtGTE   *time.Time  `json:"updatedAtGTE,omitempty"`
	UpdatedAtLT    *time.Time  `json:"updatedAtLT,omitempty"`
	UpdatedAtLTE   *time.Time  `json:"updatedAtLTE,omitempty"`

	// "name" field predicates.
	Name             *string  `json:"name,omitempty"`
	NameNEQ          *string  `json:"nameNEQ,omitempty"`
	NameIn           []string `json:"nameIn,omitempty"`
	NameNotIn        []string `json:"nameNotIn,omitempty"`
	NameGT           *string  `json:"nameGT,omitempty"`
	NameGTE          *string  `json:"nameGTE,omitempty"`
	NameLT           *string  `json:"nameLT,omitempty"`
	NameLTE          *string  `json:"nameLTE,omitempty"`
	NameContains     *string  `json:"nameContains,omitempty"`
	NameHasPrefix    *string  `json:"nameHasPrefix,omitempty"`
	NameHasSuffix    *string  `json:"nameHasSuffix,omitempty"`
	NameEqualFold    *string  `json:"nameEqualFold,omitempty"`
	NameContainsFold *string  `json:"nameContainsFold,omitempty"`

	// "reviewed_by" edge predicates.
	HasReviewedBy     *bool               `json:"hasReviewedBy,omitempty"`
	HasReviewedByWith []*ReviewWhereInput `json:"hasReviewedByWith,omitempty"`

	// "includes" edge predicates.
	HasIncludes     *bool              `json:"hasIncludes,omitempty"`
	HasIncludesWith []*AlbumWhereInput `json:"hasIncludesWith,omitempty"`

	// "tagged_with" edge predicates.
	HasTaggedWith     *bool            `json:"hasTaggedWith,omitempty"`
	HasTaggedWithWith []*TagWhereInput `json:"hasTaggedWithWith,omitempty"`
}

// AddPredicates adds custom predicates to the where input to be used during the filtering phase.
func (i *TopicWhereInput) AddPredicates(predicates ...predicate.Topic) {
	i.Predicates = append(i.Predicates, predicates...)
}

// Filter applies the TopicWhereInput filter on the TopicQuery builder.
func (i *TopicWhereInput) Filter(q *TopicQuery) (*TopicQuery, error) {
	if i == nil {
		return q, nil
	}
	p, err := i.P()
	if err != nil {
		if err == ErrEmptyTopicWhereInput {
			return q, nil
		}
		return nil, err
	}
	return q.Where(p), nil
}

// ErrEmptyTopicWhereInput is returned in case the TopicWhereInput is empty.
var ErrEmptyTopicWhereInput = errors.New("ent: empty predicate TopicWhereInput")

// P returns a predicate for filtering topics.
// An error is returned if the input is empty or invalid.
func (i *TopicWhereInput) P() (predicate.Topic, error) {
	var predicates []predicate.Topic
	if i.Not != nil {
		p, err := i.Not.P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'not'", err)
		}
		predicates = append(predicates, topic.Not(p))
	}
	switch n := len(i.Or); {
	case n == 1:
		p, err := i.Or[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'or'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		or := make([]predicate.Topic, 0, n)
		for _, w := range i.Or {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'or'", err)
			}
			or = append(or, p)
		}
		predicates = append(predicates, topic.Or(or...))
	}
	switch n := len(i.And); {
	case n == 1:
		p, err := i.And[0].P()
		if err != nil {
			return nil, fmt.Errorf("%w: field 'and'", err)
		}
		predicates = append(predicates, p)
	case n > 1:
		and := make([]predicate.Topic, 0, n)
		for _, w := range i.And {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'and'", err)
			}
			and = append(and, p)
		}
		predicates = append(predicates, topic.And(and...))
	}
	predicates = append(predicates, i.Predicates...)
	if i.ID != nil {
		predicates = append(predicates, topic.IDEQ(*i.ID))
	}
	if i.IDNEQ != nil {
		predicates = append(predicates, topic.IDNEQ(*i.IDNEQ))
	}
	if len(i.IDIn) > 0 {
		predicates = append(predicates, topic.IDIn(i.IDIn...))
	}
	if len(i.IDNotIn) > 0 {
		predicates = append(predicates, topic.IDNotIn(i.IDNotIn...))
	}
	if i.IDGT != nil {
		predicates = append(predicates, topic.IDGT(*i.IDGT))
	}
	if i.IDGTE != nil {
		predicates = append(predicates, topic.IDGTE(*i.IDGTE))
	}
	if i.IDLT != nil {
		predicates = append(predicates, topic.IDLT(*i.IDLT))
	}
	if i.IDLTE != nil {
		predicates = append(predicates, topic.IDLTE(*i.IDLTE))
	}
	if i.CreatedAt != nil {
		predicates = append(predicates, topic.CreatedAtEQ(*i.CreatedAt))
	}
	if i.CreatedAtNEQ != nil {
		predicates = append(predicates, topic.CreatedAtNEQ(*i.CreatedAtNEQ))
	}
	if len(i.CreatedAtIn) > 0 {
		predicates = append(predicates, topic.CreatedAtIn(i.CreatedAtIn...))
	}
	if len(i.CreatedAtNotIn) > 0 {
		predicates = append(predicates, topic.CreatedAtNotIn(i.CreatedAtNotIn...))
	}
	if i.CreatedAtGT != nil {
		predicates = append(predicates, topic.CreatedAtGT(*i.CreatedAtGT))
	}
	if i.CreatedAtGTE != nil {
		predicates = append(predicates, topic.CreatedAtGTE(*i.CreatedAtGTE))
	}
	if i.CreatedAtLT != nil {
		predicates = append(predicates, topic.CreatedAtLT(*i.CreatedAtLT))
	}
	if i.CreatedAtLTE != nil {
		predicates = append(predicates, topic.CreatedAtLTE(*i.CreatedAtLTE))
	}
	if i.UpdatedAt != nil {
		predicates = append(predicates, topic.UpdatedAtEQ(*i.UpdatedAt))
	}
	if i.UpdatedAtNEQ != nil {
		predicates = append(predicates, topic.UpdatedAtNEQ(*i.UpdatedAtNEQ))
	}
	if len(i.UpdatedAtIn) > 0 {
		predicates = append(predicates, topic.UpdatedAtIn(i.UpdatedAtIn...))
	}
	if len(i.UpdatedAtNotIn) > 0 {
		predicates = append(predicates, topic.UpdatedAtNotIn(i.UpdatedAtNotIn...))
	}
	if i.UpdatedAtGT != nil {
		predicates = append(predicates, topic.UpdatedAtGT(*i.UpdatedAtGT))
	}
	if i.UpdatedAtGTE != nil {
		predicates = append(predicates, topic.UpdatedAtGTE(*i.UpdatedAtGTE))
	}
	if i.UpdatedAtLT != nil {
		predicates = append(predicates, topic.UpdatedAtLT(*i.UpdatedAtLT))
	}
	if i.UpdatedAtLTE != nil {
		predicates = append(predicates, topic.UpdatedAtLTE(*i.UpdatedAtLTE))
	}
	if i.Name != nil {
		predicates = append(predicates, topic.NameEQ(*i.Name))
	}
	if i.NameNEQ != nil {
		predicates = append(predicates, topic.NameNEQ(*i.NameNEQ))
	}
	if len(i.NameIn) > 0 {
		predicates = append(predicates, topic.NameIn(i.NameIn...))
	}
	if len(i.NameNotIn) > 0 {
		predicates = append(predicates, topic.NameNotIn(i.NameNotIn...))
	}
	if i.NameGT != nil {
		predicates = append(predicates, topic.NameGT(*i.NameGT))
	}
	if i.NameGTE != nil {
		predicates = append(predicates, topic.NameGTE(*i.NameGTE))
	}
	if i.NameLT != nil {
		predicates = append(predicates, topic.NameLT(*i.NameLT))
	}
	if i.NameLTE != nil {
		predicates = append(predicates, topic.NameLTE(*i.NameLTE))
	}
	if i.NameContains != nil {
		predicates = append(predicates, topic.NameContains(*i.NameContains))
	}
	if i.NameHasPrefix != nil {
		predicates = append(predicates, topic.NameHasPrefix(*i.NameHasPrefix))
	}
	if i.NameHasSuffix != nil {
		predicates = append(predicates, topic.NameHasSuffix(*i.NameHasSuffix))
	}
	if i.NameEqualFold != nil {
		predicates = append(predicates, topic.NameEqualFold(*i.NameEqualFold))
	}
	if i.NameContainsFold != nil {
		predicates = append(predicates, topic.NameContainsFold(*i.NameContainsFold))
	}

	if i.HasReviewedBy != nil {
		p := topic.HasReviewedBy()
		if !*i.HasReviewedBy {
			p = topic.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasReviewedByWith) > 0 {
		with := make([]predicate.Review, 0, len(i.HasReviewedByWith))
		for _, w := range i.HasReviewedByWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasReviewedByWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, topic.HasReviewedByWith(with...))
	}
	if i.HasIncludes != nil {
		p := topic.HasIncludes()
		if !*i.HasIncludes {
			p = topic.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasIncludesWith) > 0 {
		with := make([]predicate.Album, 0, len(i.HasIncludesWith))
		for _, w := range i.HasIncludesWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasIncludesWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, topic.HasIncludesWith(with...))
	}
	if i.HasTaggedWith != nil {
		p := topic.HasTaggedWith()
		if !*i.HasTaggedWith {
			p = topic.Not(p)
		}
		predicates = append(predicates, p)
	}
	if len(i.HasTaggedWithWith) > 0 {
		with := make([]predicate.Tag, 0, len(i.HasTaggedWithWith))
		for _, w := range i.HasTaggedWithWith {
			p, err := w.P()
			if err != nil {
				return nil, fmt.Errorf("%w: field 'HasTaggedWithWith'", err)
			}
			with = append(with, p)
		}
		predicates = append(predicates, topic.HasTaggedWithWith(with...))
	}
	switch len(predicates) {
	case 0:
		return nil, ErrEmptyTopicWhereInput
	case 1:
		return predicates[0], nil
	default:
		return topic.And(predicates...), nil
	}
}
