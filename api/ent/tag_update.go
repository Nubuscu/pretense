// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"nubuscu/pretense/ent/album"
	"nubuscu/pretense/ent/artist"
	"nubuscu/pretense/ent/predicate"
	"nubuscu/pretense/ent/review"
	"nubuscu/pretense/ent/tag"
	"nubuscu/pretense/ent/topic"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TagUpdate is the builder for updating Tag entities.
type TagUpdate struct {
	config
	hooks    []Hook
	mutation *TagMutation
}

// Where appends a list predicates to the TagUpdate builder.
func (tu *TagUpdate) Where(ps ...predicate.Tag) *TagUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetKey sets the "key" field.
func (tu *TagUpdate) SetKey(s string) *TagUpdate {
	tu.mutation.SetKey(s)
	return tu
}

// SetValue sets the "value" field.
func (tu *TagUpdate) SetValue(s string) *TagUpdate {
	tu.mutation.SetValue(s)
	return tu
}

// AddTagsAlbumIDs adds the "tags_album" edge to the Album entity by IDs.
func (tu *TagUpdate) AddTagsAlbumIDs(ids ...int) *TagUpdate {
	tu.mutation.AddTagsAlbumIDs(ids...)
	return tu
}

// AddTagsAlbum adds the "tags_album" edges to the Album entity.
func (tu *TagUpdate) AddTagsAlbum(a ...*Album) *TagUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.AddTagsAlbumIDs(ids...)
}

// AddTagsArtistIDs adds the "tags_artist" edge to the Artist entity by IDs.
func (tu *TagUpdate) AddTagsArtistIDs(ids ...int) *TagUpdate {
	tu.mutation.AddTagsArtistIDs(ids...)
	return tu
}

// AddTagsArtist adds the "tags_artist" edges to the Artist entity.
func (tu *TagUpdate) AddTagsArtist(a ...*Artist) *TagUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.AddTagsArtistIDs(ids...)
}

// AddTagsReviewIDs adds the "tags_review" edge to the Review entity by IDs.
func (tu *TagUpdate) AddTagsReviewIDs(ids ...int) *TagUpdate {
	tu.mutation.AddTagsReviewIDs(ids...)
	return tu
}

// AddTagsReview adds the "tags_review" edges to the Review entity.
func (tu *TagUpdate) AddTagsReview(r ...*Review) *TagUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tu.AddTagsReviewIDs(ids...)
}

// AddTagsTopicIDs adds the "tags_topic" edge to the Topic entity by IDs.
func (tu *TagUpdate) AddTagsTopicIDs(ids ...int) *TagUpdate {
	tu.mutation.AddTagsTopicIDs(ids...)
	return tu
}

// AddTagsTopic adds the "tags_topic" edges to the Topic entity.
func (tu *TagUpdate) AddTagsTopic(t ...*Topic) *TagUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTagsTopicIDs(ids...)
}

// Mutation returns the TagMutation object of the builder.
func (tu *TagUpdate) Mutation() *TagMutation {
	return tu.mutation
}

// ClearTagsAlbum clears all "tags_album" edges to the Album entity.
func (tu *TagUpdate) ClearTagsAlbum() *TagUpdate {
	tu.mutation.ClearTagsAlbum()
	return tu
}

// RemoveTagsAlbumIDs removes the "tags_album" edge to Album entities by IDs.
func (tu *TagUpdate) RemoveTagsAlbumIDs(ids ...int) *TagUpdate {
	tu.mutation.RemoveTagsAlbumIDs(ids...)
	return tu
}

// RemoveTagsAlbum removes "tags_album" edges to Album entities.
func (tu *TagUpdate) RemoveTagsAlbum(a ...*Album) *TagUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.RemoveTagsAlbumIDs(ids...)
}

// ClearTagsArtist clears all "tags_artist" edges to the Artist entity.
func (tu *TagUpdate) ClearTagsArtist() *TagUpdate {
	tu.mutation.ClearTagsArtist()
	return tu
}

// RemoveTagsArtistIDs removes the "tags_artist" edge to Artist entities by IDs.
func (tu *TagUpdate) RemoveTagsArtistIDs(ids ...int) *TagUpdate {
	tu.mutation.RemoveTagsArtistIDs(ids...)
	return tu
}

// RemoveTagsArtist removes "tags_artist" edges to Artist entities.
func (tu *TagUpdate) RemoveTagsArtist(a ...*Artist) *TagUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.RemoveTagsArtistIDs(ids...)
}

// ClearTagsReview clears all "tags_review" edges to the Review entity.
func (tu *TagUpdate) ClearTagsReview() *TagUpdate {
	tu.mutation.ClearTagsReview()
	return tu
}

// RemoveTagsReviewIDs removes the "tags_review" edge to Review entities by IDs.
func (tu *TagUpdate) RemoveTagsReviewIDs(ids ...int) *TagUpdate {
	tu.mutation.RemoveTagsReviewIDs(ids...)
	return tu
}

// RemoveTagsReview removes "tags_review" edges to Review entities.
func (tu *TagUpdate) RemoveTagsReview(r ...*Review) *TagUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tu.RemoveTagsReviewIDs(ids...)
}

// ClearTagsTopic clears all "tags_topic" edges to the Topic entity.
func (tu *TagUpdate) ClearTagsTopic() *TagUpdate {
	tu.mutation.ClearTagsTopic()
	return tu
}

// RemoveTagsTopicIDs removes the "tags_topic" edge to Topic entities by IDs.
func (tu *TagUpdate) RemoveTagsTopicIDs(ids ...int) *TagUpdate {
	tu.mutation.RemoveTagsTopicIDs(ids...)
	return tu
}

// RemoveTagsTopic removes "tags_topic" edges to Topic entities.
func (tu *TagUpdate) RemoveTagsTopic(t ...*Topic) *TagUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTagsTopicIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TagUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		if err = tu.check(); err != nil {
			return 0, err
		}
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tu.check(); err != nil {
				return 0, err
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TagUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TagUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TagUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TagUpdate) check() error {
	if v, ok := tu.mutation.Key(); ok {
		if err := tag.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Tag.key": %w`, err)}
		}
	}
	if v, ok := tu.mutation.Value(); ok {
		if err := tag.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Tag.value": %w`, err)}
		}
	}
	return nil
}

func (tu *TagUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tag.Table,
			Columns: tag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tag.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Key(); ok {
		_spec.SetField(tag.FieldKey, field.TypeString, value)
	}
	if value, ok := tu.mutation.Value(); ok {
		_spec.SetField(tag.FieldValue, field.TypeString, value)
	}
	if tu.mutation.TagsAlbumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsAlbumTable,
			Columns: tag.TagsAlbumPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: album.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTagsAlbumIDs(); len(nodes) > 0 && !tu.mutation.TagsAlbumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsAlbumTable,
			Columns: tag.TagsAlbumPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: album.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TagsAlbumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsAlbumTable,
			Columns: tag.TagsAlbumPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: album.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TagsArtistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsArtistTable,
			Columns: tag.TagsArtistPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTagsArtistIDs(); len(nodes) > 0 && !tu.mutation.TagsArtistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsArtistTable,
			Columns: tag.TagsArtistPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TagsArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsArtistTable,
			Columns: tag.TagsArtistPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TagsReviewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsReviewTable,
			Columns: tag.TagsReviewPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: review.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTagsReviewIDs(); len(nodes) > 0 && !tu.mutation.TagsReviewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsReviewTable,
			Columns: tag.TagsReviewPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: review.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TagsReviewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsReviewTable,
			Columns: tag.TagsReviewPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: review.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.TagsTopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsTopicTable,
			Columns: tag.TagsTopicPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTagsTopicIDs(); len(nodes) > 0 && !tu.mutation.TagsTopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsTopicTable,
			Columns: tag.TagsTopicPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TagsTopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsTopicTable,
			Columns: tag.TagsTopicPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// TagUpdateOne is the builder for updating a single Tag entity.
type TagUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TagMutation
}

// SetKey sets the "key" field.
func (tuo *TagUpdateOne) SetKey(s string) *TagUpdateOne {
	tuo.mutation.SetKey(s)
	return tuo
}

// SetValue sets the "value" field.
func (tuo *TagUpdateOne) SetValue(s string) *TagUpdateOne {
	tuo.mutation.SetValue(s)
	return tuo
}

// AddTagsAlbumIDs adds the "tags_album" edge to the Album entity by IDs.
func (tuo *TagUpdateOne) AddTagsAlbumIDs(ids ...int) *TagUpdateOne {
	tuo.mutation.AddTagsAlbumIDs(ids...)
	return tuo
}

// AddTagsAlbum adds the "tags_album" edges to the Album entity.
func (tuo *TagUpdateOne) AddTagsAlbum(a ...*Album) *TagUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.AddTagsAlbumIDs(ids...)
}

// AddTagsArtistIDs adds the "tags_artist" edge to the Artist entity by IDs.
func (tuo *TagUpdateOne) AddTagsArtistIDs(ids ...int) *TagUpdateOne {
	tuo.mutation.AddTagsArtistIDs(ids...)
	return tuo
}

// AddTagsArtist adds the "tags_artist" edges to the Artist entity.
func (tuo *TagUpdateOne) AddTagsArtist(a ...*Artist) *TagUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.AddTagsArtistIDs(ids...)
}

// AddTagsReviewIDs adds the "tags_review" edge to the Review entity by IDs.
func (tuo *TagUpdateOne) AddTagsReviewIDs(ids ...int) *TagUpdateOne {
	tuo.mutation.AddTagsReviewIDs(ids...)
	return tuo
}

// AddTagsReview adds the "tags_review" edges to the Review entity.
func (tuo *TagUpdateOne) AddTagsReview(r ...*Review) *TagUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tuo.AddTagsReviewIDs(ids...)
}

// AddTagsTopicIDs adds the "tags_topic" edge to the Topic entity by IDs.
func (tuo *TagUpdateOne) AddTagsTopicIDs(ids ...int) *TagUpdateOne {
	tuo.mutation.AddTagsTopicIDs(ids...)
	return tuo
}

// AddTagsTopic adds the "tags_topic" edges to the Topic entity.
func (tuo *TagUpdateOne) AddTagsTopic(t ...*Topic) *TagUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTagsTopicIDs(ids...)
}

// Mutation returns the TagMutation object of the builder.
func (tuo *TagUpdateOne) Mutation() *TagMutation {
	return tuo.mutation
}

// ClearTagsAlbum clears all "tags_album" edges to the Album entity.
func (tuo *TagUpdateOne) ClearTagsAlbum() *TagUpdateOne {
	tuo.mutation.ClearTagsAlbum()
	return tuo
}

// RemoveTagsAlbumIDs removes the "tags_album" edge to Album entities by IDs.
func (tuo *TagUpdateOne) RemoveTagsAlbumIDs(ids ...int) *TagUpdateOne {
	tuo.mutation.RemoveTagsAlbumIDs(ids...)
	return tuo
}

// RemoveTagsAlbum removes "tags_album" edges to Album entities.
func (tuo *TagUpdateOne) RemoveTagsAlbum(a ...*Album) *TagUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.RemoveTagsAlbumIDs(ids...)
}

// ClearTagsArtist clears all "tags_artist" edges to the Artist entity.
func (tuo *TagUpdateOne) ClearTagsArtist() *TagUpdateOne {
	tuo.mutation.ClearTagsArtist()
	return tuo
}

// RemoveTagsArtistIDs removes the "tags_artist" edge to Artist entities by IDs.
func (tuo *TagUpdateOne) RemoveTagsArtistIDs(ids ...int) *TagUpdateOne {
	tuo.mutation.RemoveTagsArtistIDs(ids...)
	return tuo
}

// RemoveTagsArtist removes "tags_artist" edges to Artist entities.
func (tuo *TagUpdateOne) RemoveTagsArtist(a ...*Artist) *TagUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.RemoveTagsArtistIDs(ids...)
}

// ClearTagsReview clears all "tags_review" edges to the Review entity.
func (tuo *TagUpdateOne) ClearTagsReview() *TagUpdateOne {
	tuo.mutation.ClearTagsReview()
	return tuo
}

// RemoveTagsReviewIDs removes the "tags_review" edge to Review entities by IDs.
func (tuo *TagUpdateOne) RemoveTagsReviewIDs(ids ...int) *TagUpdateOne {
	tuo.mutation.RemoveTagsReviewIDs(ids...)
	return tuo
}

// RemoveTagsReview removes "tags_review" edges to Review entities.
func (tuo *TagUpdateOne) RemoveTagsReview(r ...*Review) *TagUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tuo.RemoveTagsReviewIDs(ids...)
}

// ClearTagsTopic clears all "tags_topic" edges to the Topic entity.
func (tuo *TagUpdateOne) ClearTagsTopic() *TagUpdateOne {
	tuo.mutation.ClearTagsTopic()
	return tuo
}

// RemoveTagsTopicIDs removes the "tags_topic" edge to Topic entities by IDs.
func (tuo *TagUpdateOne) RemoveTagsTopicIDs(ids ...int) *TagUpdateOne {
	tuo.mutation.RemoveTagsTopicIDs(ids...)
	return tuo
}

// RemoveTagsTopic removes "tags_topic" edges to Topic entities.
func (tuo *TagUpdateOne) RemoveTagsTopic(t ...*Topic) *TagUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTagsTopicIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TagUpdateOne) Select(field string, fields ...string) *TagUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tag entity.
func (tuo *TagUpdateOne) Save(ctx context.Context) (*Tag, error) {
	var (
		err  error
		node *Tag
	)
	if len(tuo.hooks) == 0 {
		if err = tuo.check(); err != nil {
			return nil, err
		}
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TagMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = tuo.check(); err != nil {
				return nil, err
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, tuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Tag)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from TagMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TagUpdateOne) SaveX(ctx context.Context) *Tag {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TagUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TagUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TagUpdateOne) check() error {
	if v, ok := tuo.mutation.Key(); ok {
		if err := tag.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "Tag.key": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.Value(); ok {
		if err := tag.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "Tag.value": %w`, err)}
		}
	}
	return nil
}

func (tuo *TagUpdateOne) sqlSave(ctx context.Context) (_node *Tag, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   tag.Table,
			Columns: tag.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: tag.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tag.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tag.FieldID)
		for _, f := range fields {
			if !tag.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tag.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Key(); ok {
		_spec.SetField(tag.FieldKey, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Value(); ok {
		_spec.SetField(tag.FieldValue, field.TypeString, value)
	}
	if tuo.mutation.TagsAlbumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsAlbumTable,
			Columns: tag.TagsAlbumPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: album.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTagsAlbumIDs(); len(nodes) > 0 && !tuo.mutation.TagsAlbumCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsAlbumTable,
			Columns: tag.TagsAlbumPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: album.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TagsAlbumIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsAlbumTable,
			Columns: tag.TagsAlbumPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: album.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TagsArtistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsArtistTable,
			Columns: tag.TagsArtistPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTagsArtistIDs(); len(nodes) > 0 && !tuo.mutation.TagsArtistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsArtistTable,
			Columns: tag.TagsArtistPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TagsArtistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsArtistTable,
			Columns: tag.TagsArtistPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: artist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TagsReviewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsReviewTable,
			Columns: tag.TagsReviewPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: review.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTagsReviewIDs(); len(nodes) > 0 && !tuo.mutation.TagsReviewCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsReviewTable,
			Columns: tag.TagsReviewPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: review.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TagsReviewIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsReviewTable,
			Columns: tag.TagsReviewPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: review.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.TagsTopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsTopicTable,
			Columns: tag.TagsTopicPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTagsTopicIDs(); len(nodes) > 0 && !tuo.mutation.TagsTopicCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsTopicTable,
			Columns: tag.TagsTopicPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TagsTopicIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   tag.TagsTopicTable,
			Columns: tag.TagsTopicPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: topic.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Tag{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tag.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
