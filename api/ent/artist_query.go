// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"
	"nubuscu/pretense/ent/album"
	"nubuscu/pretense/ent/artist"
	"nubuscu/pretense/ent/predicate"
	"nubuscu/pretense/ent/tag"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ArtistQuery is the builder for querying Artist entities.
type ArtistQuery struct {
	config
	limit               *int
	offset              *int
	unique              *bool
	order               []OrderFunc
	fields              []string
	predicates          []predicate.Artist
	withWrote           *AlbumQuery
	withTaggedWith      *TagQuery
	modifiers           []func(*sql.Selector)
	loadTotal           []func(context.Context, []*Artist) error
	withNamedWrote      map[string]*AlbumQuery
	withNamedTaggedWith map[string]*TagQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the ArtistQuery builder.
func (aq *ArtistQuery) Where(ps ...predicate.Artist) *ArtistQuery {
	aq.predicates = append(aq.predicates, ps...)
	return aq
}

// Limit adds a limit step to the query.
func (aq *ArtistQuery) Limit(limit int) *ArtistQuery {
	aq.limit = &limit
	return aq
}

// Offset adds an offset step to the query.
func (aq *ArtistQuery) Offset(offset int) *ArtistQuery {
	aq.offset = &offset
	return aq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (aq *ArtistQuery) Unique(unique bool) *ArtistQuery {
	aq.unique = &unique
	return aq
}

// Order adds an order step to the query.
func (aq *ArtistQuery) Order(o ...OrderFunc) *ArtistQuery {
	aq.order = append(aq.order, o...)
	return aq
}

// QueryWrote chains the current query on the "wrote" edge.
func (aq *ArtistQuery) QueryWrote() *AlbumQuery {
	query := &AlbumQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artist.Table, artist.FieldID, selector),
			sqlgraph.To(album.Table, album.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, artist.WroteTable, artist.WrotePrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTaggedWith chains the current query on the "tagged_with" edge.
func (aq *ArtistQuery) QueryTaggedWith() *TagQuery {
	query := &TagQuery{config: aq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := aq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(artist.Table, artist.FieldID, selector),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, artist.TaggedWithTable, artist.TaggedWithPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(aq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Artist entity from the query.
// Returns a *NotFoundError when no Artist was found.
func (aq *ArtistQuery) First(ctx context.Context) (*Artist, error) {
	nodes, err := aq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{artist.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (aq *ArtistQuery) FirstX(ctx context.Context) *Artist {
	node, err := aq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Artist ID from the query.
// Returns a *NotFoundError when no Artist ID was found.
func (aq *ArtistQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{artist.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (aq *ArtistQuery) FirstIDX(ctx context.Context) int {
	id, err := aq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Artist entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Artist entity is found.
// Returns a *NotFoundError when no Artist entities are found.
func (aq *ArtistQuery) Only(ctx context.Context) (*Artist, error) {
	nodes, err := aq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{artist.Label}
	default:
		return nil, &NotSingularError{artist.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (aq *ArtistQuery) OnlyX(ctx context.Context) *Artist {
	node, err := aq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Artist ID in the query.
// Returns a *NotSingularError when more than one Artist ID is found.
// Returns a *NotFoundError when no entities are found.
func (aq *ArtistQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = aq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{artist.Label}
	default:
		err = &NotSingularError{artist.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (aq *ArtistQuery) OnlyIDX(ctx context.Context) int {
	id, err := aq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Artists.
func (aq *ArtistQuery) All(ctx context.Context) ([]*Artist, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return aq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (aq *ArtistQuery) AllX(ctx context.Context) []*Artist {
	nodes, err := aq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Artist IDs.
func (aq *ArtistQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := aq.Select(artist.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (aq *ArtistQuery) IDsX(ctx context.Context) []int {
	ids, err := aq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (aq *ArtistQuery) Count(ctx context.Context) (int, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return aq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (aq *ArtistQuery) CountX(ctx context.Context) int {
	count, err := aq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (aq *ArtistQuery) Exist(ctx context.Context) (bool, error) {
	if err := aq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return aq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (aq *ArtistQuery) ExistX(ctx context.Context) bool {
	exist, err := aq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the ArtistQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (aq *ArtistQuery) Clone() *ArtistQuery {
	if aq == nil {
		return nil
	}
	return &ArtistQuery{
		config:         aq.config,
		limit:          aq.limit,
		offset:         aq.offset,
		order:          append([]OrderFunc{}, aq.order...),
		predicates:     append([]predicate.Artist{}, aq.predicates...),
		withWrote:      aq.withWrote.Clone(),
		withTaggedWith: aq.withTaggedWith.Clone(),
		// clone intermediate query.
		sql:    aq.sql.Clone(),
		path:   aq.path,
		unique: aq.unique,
	}
}

// WithWrote tells the query-builder to eager-load the nodes that are connected to
// the "wrote" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtistQuery) WithWrote(opts ...func(*AlbumQuery)) *ArtistQuery {
	query := &AlbumQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withWrote = query
	return aq
}

// WithTaggedWith tells the query-builder to eager-load the nodes that are connected to
// the "tagged_with" edge. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtistQuery) WithTaggedWith(opts ...func(*TagQuery)) *ArtistQuery {
	query := &TagQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	aq.withTaggedWith = query
	return aq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Artist.Query().
//		GroupBy(artist.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (aq *ArtistQuery) GroupBy(field string, fields ...string) *ArtistGroupBy {
	grbuild := &ArtistGroupBy{config: aq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := aq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return aq.sqlQuery(ctx), nil
	}
	grbuild.label = artist.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Artist.Query().
//		Select(artist.FieldCreatedAt).
//		Scan(ctx, &v)
func (aq *ArtistQuery) Select(fields ...string) *ArtistSelect {
	aq.fields = append(aq.fields, fields...)
	selbuild := &ArtistSelect{ArtistQuery: aq}
	selbuild.label = artist.Label
	selbuild.flds, selbuild.scan = &aq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a ArtistSelect configured with the given aggregations.
func (aq *ArtistQuery) Aggregate(fns ...AggregateFunc) *ArtistSelect {
	return aq.Select().Aggregate(fns...)
}

func (aq *ArtistQuery) prepareQuery(ctx context.Context) error {
	for _, f := range aq.fields {
		if !artist.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if aq.path != nil {
		prev, err := aq.path(ctx)
		if err != nil {
			return err
		}
		aq.sql = prev
	}
	return nil
}

func (aq *ArtistQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Artist, error) {
	var (
		nodes       = []*Artist{}
		_spec       = aq.querySpec()
		loadedTypes = [2]bool{
			aq.withWrote != nil,
			aq.withTaggedWith != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Artist).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Artist{config: aq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(aq.modifiers) > 0 {
		_spec.Modifiers = aq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, aq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := aq.withWrote; query != nil {
		if err := aq.loadWrote(ctx, query, nodes,
			func(n *Artist) { n.Edges.Wrote = []*Album{} },
			func(n *Artist, e *Album) { n.Edges.Wrote = append(n.Edges.Wrote, e) }); err != nil {
			return nil, err
		}
	}
	if query := aq.withTaggedWith; query != nil {
		if err := aq.loadTaggedWith(ctx, query, nodes,
			func(n *Artist) { n.Edges.TaggedWith = []*Tag{} },
			func(n *Artist, e *Tag) { n.Edges.TaggedWith = append(n.Edges.TaggedWith, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range aq.withNamedWrote {
		if err := aq.loadWrote(ctx, query, nodes,
			func(n *Artist) { n.appendNamedWrote(name) },
			func(n *Artist, e *Album) { n.appendNamedWrote(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range aq.withNamedTaggedWith {
		if err := aq.loadTaggedWith(ctx, query, nodes,
			func(n *Artist) { n.appendNamedTaggedWith(name) },
			func(n *Artist, e *Tag) { n.appendNamedTaggedWith(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range aq.loadTotal {
		if err := aq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (aq *ArtistQuery) loadWrote(ctx context.Context, query *AlbumQuery, nodes []*Artist, init func(*Artist), assign func(*Artist, *Album)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Artist)
	nids := make(map[int]map[*Artist]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(artist.WroteTable)
		s.Join(joinT).On(s.C(album.FieldID), joinT.C(artist.WrotePrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(artist.WrotePrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(artist.WrotePrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*Artist]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "wrote" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (aq *ArtistQuery) loadTaggedWith(ctx context.Context, query *TagQuery, nodes []*Artist, init func(*Artist), assign func(*Artist, *Tag)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*Artist)
	nids := make(map[int]map[*Artist]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(artist.TaggedWithTable)
		s.Join(joinT).On(s.C(tag.FieldID), joinT.C(artist.TaggedWithPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(artist.TaggedWithPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(artist.TaggedWithPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*Artist]struct{}{byID[outValue]: {}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tagged_with" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (aq *ArtistQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := aq.querySpec()
	if len(aq.modifiers) > 0 {
		_spec.Modifiers = aq.modifiers
	}
	_spec.Node.Columns = aq.fields
	if len(aq.fields) > 0 {
		_spec.Unique = aq.unique != nil && *aq.unique
	}
	return sqlgraph.CountNodes(ctx, aq.driver, _spec)
}

func (aq *ArtistQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := aq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (aq *ArtistQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   artist.Table,
			Columns: artist.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: artist.FieldID,
			},
		},
		From:   aq.sql,
		Unique: true,
	}
	if unique := aq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := aq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, artist.FieldID)
		for i := range fields {
			if fields[i] != artist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := aq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := aq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := aq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := aq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (aq *ArtistQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(aq.driver.Dialect())
	t1 := builder.Table(artist.Table)
	columns := aq.fields
	if len(columns) == 0 {
		columns = artist.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if aq.sql != nil {
		selector = aq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if aq.unique != nil && *aq.unique {
		selector.Distinct()
	}
	for _, p := range aq.predicates {
		p(selector)
	}
	for _, p := range aq.order {
		p(selector)
	}
	if offset := aq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := aq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedWrote tells the query-builder to eager-load the nodes that are connected to the "wrote"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtistQuery) WithNamedWrote(name string, opts ...func(*AlbumQuery)) *ArtistQuery {
	query := &AlbumQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	if aq.withNamedWrote == nil {
		aq.withNamedWrote = make(map[string]*AlbumQuery)
	}
	aq.withNamedWrote[name] = query
	return aq
}

// WithNamedTaggedWith tells the query-builder to eager-load the nodes that are connected to the "tagged_with"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (aq *ArtistQuery) WithNamedTaggedWith(name string, opts ...func(*TagQuery)) *ArtistQuery {
	query := &TagQuery{config: aq.config}
	for _, opt := range opts {
		opt(query)
	}
	if aq.withNamedTaggedWith == nil {
		aq.withNamedTaggedWith = make(map[string]*TagQuery)
	}
	aq.withNamedTaggedWith[name] = query
	return aq
}

// ArtistGroupBy is the group-by builder for Artist entities.
type ArtistGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (agb *ArtistGroupBy) Aggregate(fns ...AggregateFunc) *ArtistGroupBy {
	agb.fns = append(agb.fns, fns...)
	return agb
}

// Scan applies the group-by query and scans the result into the given value.
func (agb *ArtistGroupBy) Scan(ctx context.Context, v any) error {
	query, err := agb.path(ctx)
	if err != nil {
		return err
	}
	agb.sql = query
	return agb.sqlScan(ctx, v)
}

func (agb *ArtistGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range agb.fields {
		if !artist.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := agb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := agb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (agb *ArtistGroupBy) sqlQuery() *sql.Selector {
	selector := agb.sql.Select()
	aggregation := make([]string, 0, len(agb.fns))
	for _, fn := range agb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(agb.fields)+len(agb.fns))
		for _, f := range agb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(agb.fields...)...)
}

// ArtistSelect is the builder for selecting fields of Artist entities.
type ArtistSelect struct {
	*ArtistQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (as *ArtistSelect) Aggregate(fns ...AggregateFunc) *ArtistSelect {
	as.fns = append(as.fns, fns...)
	return as
}

// Scan applies the selector query and scans the result into the given value.
func (as *ArtistSelect) Scan(ctx context.Context, v any) error {
	if err := as.prepareQuery(ctx); err != nil {
		return err
	}
	as.sql = as.ArtistQuery.sqlQuery(ctx)
	return as.sqlScan(ctx, v)
}

func (as *ArtistSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(as.fns))
	for _, fn := range as.fns {
		aggregation = append(aggregation, fn(as.sql))
	}
	switch n := len(*as.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		as.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		as.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := as.sql.Query()
	if err := as.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
