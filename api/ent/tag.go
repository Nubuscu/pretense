// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"nubuscu/pretense/ent/tag"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Tag is the model entity for the Tag schema.
type Tag struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// Value holds the value of the "value" field.
	Value string `json:"value,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TagQuery when eager-loading is set.
	Edges TagEdges `json:"edges"`
}

// TagEdges holds the relations/edges for other nodes in the graph.
type TagEdges struct {
	// TagsAlbum holds the value of the tags_album edge.
	TagsAlbum []*Album `json:"tags_album,omitempty"`
	// TagsArtist holds the value of the tags_artist edge.
	TagsArtist []*Artist `json:"tags_artist,omitempty"`
	// TagsReview holds the value of the tags_review edge.
	TagsReview []*Review `json:"tags_review,omitempty"`
	// TagsTopic holds the value of the tags_topic edge.
	TagsTopic []*Topic `json:"tags_topic,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedTagsAlbum  map[string][]*Album
	namedTagsArtist map[string][]*Artist
	namedTagsReview map[string][]*Review
	namedTagsTopic  map[string][]*Topic
}

// TagsAlbumOrErr returns the TagsAlbum value or an error if the edge
// was not loaded in eager-loading.
func (e TagEdges) TagsAlbumOrErr() ([]*Album, error) {
	if e.loadedTypes[0] {
		return e.TagsAlbum, nil
	}
	return nil, &NotLoadedError{edge: "tags_album"}
}

// TagsArtistOrErr returns the TagsArtist value or an error if the edge
// was not loaded in eager-loading.
func (e TagEdges) TagsArtistOrErr() ([]*Artist, error) {
	if e.loadedTypes[1] {
		return e.TagsArtist, nil
	}
	return nil, &NotLoadedError{edge: "tags_artist"}
}

// TagsReviewOrErr returns the TagsReview value or an error if the edge
// was not loaded in eager-loading.
func (e TagEdges) TagsReviewOrErr() ([]*Review, error) {
	if e.loadedTypes[2] {
		return e.TagsReview, nil
	}
	return nil, &NotLoadedError{edge: "tags_review"}
}

// TagsTopicOrErr returns the TagsTopic value or an error if the edge
// was not loaded in eager-loading.
func (e TagEdges) TagsTopicOrErr() ([]*Topic, error) {
	if e.loadedTypes[3] {
		return e.TagsTopic, nil
	}
	return nil, &NotLoadedError{edge: "tags_topic"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Tag) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case tag.FieldID:
			values[i] = new(sql.NullInt64)
		case tag.FieldKey, tag.FieldValue:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Tag", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Tag fields.
func (t *Tag) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case tag.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case tag.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				t.Key = value.String
			}
		case tag.FieldValue:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field value", values[i])
			} else if value.Valid {
				t.Value = value.String
			}
		}
	}
	return nil
}

// QueryTagsAlbum queries the "tags_album" edge of the Tag entity.
func (t *Tag) QueryTagsAlbum() *AlbumQuery {
	return (&TagClient{config: t.config}).QueryTagsAlbum(t)
}

// QueryTagsArtist queries the "tags_artist" edge of the Tag entity.
func (t *Tag) QueryTagsArtist() *ArtistQuery {
	return (&TagClient{config: t.config}).QueryTagsArtist(t)
}

// QueryTagsReview queries the "tags_review" edge of the Tag entity.
func (t *Tag) QueryTagsReview() *ReviewQuery {
	return (&TagClient{config: t.config}).QueryTagsReview(t)
}

// QueryTagsTopic queries the "tags_topic" edge of the Tag entity.
func (t *Tag) QueryTagsTopic() *TopicQuery {
	return (&TagClient{config: t.config}).QueryTagsTopic(t)
}

// Update returns a builder for updating this Tag.
// Note that you need to call Tag.Unwrap() before calling this method if this Tag
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Tag) Update() *TagUpdateOne {
	return (&TagClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Tag entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Tag) Unwrap() *Tag {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Tag is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Tag) String() string {
	var builder strings.Builder
	builder.WriteString("Tag(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("key=")
	builder.WriteString(t.Key)
	builder.WriteString(", ")
	builder.WriteString("value=")
	builder.WriteString(t.Value)
	builder.WriteByte(')')
	return builder.String()
}

// NamedTagsAlbum returns the TagsAlbum named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Tag) NamedTagsAlbum(name string) ([]*Album, error) {
	if t.Edges.namedTagsAlbum == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedTagsAlbum[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Tag) appendNamedTagsAlbum(name string, edges ...*Album) {
	if t.Edges.namedTagsAlbum == nil {
		t.Edges.namedTagsAlbum = make(map[string][]*Album)
	}
	if len(edges) == 0 {
		t.Edges.namedTagsAlbum[name] = []*Album{}
	} else {
		t.Edges.namedTagsAlbum[name] = append(t.Edges.namedTagsAlbum[name], edges...)
	}
}

// NamedTagsArtist returns the TagsArtist named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Tag) NamedTagsArtist(name string) ([]*Artist, error) {
	if t.Edges.namedTagsArtist == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedTagsArtist[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Tag) appendNamedTagsArtist(name string, edges ...*Artist) {
	if t.Edges.namedTagsArtist == nil {
		t.Edges.namedTagsArtist = make(map[string][]*Artist)
	}
	if len(edges) == 0 {
		t.Edges.namedTagsArtist[name] = []*Artist{}
	} else {
		t.Edges.namedTagsArtist[name] = append(t.Edges.namedTagsArtist[name], edges...)
	}
}

// NamedTagsReview returns the TagsReview named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Tag) NamedTagsReview(name string) ([]*Review, error) {
	if t.Edges.namedTagsReview == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedTagsReview[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Tag) appendNamedTagsReview(name string, edges ...*Review) {
	if t.Edges.namedTagsReview == nil {
		t.Edges.namedTagsReview = make(map[string][]*Review)
	}
	if len(edges) == 0 {
		t.Edges.namedTagsReview[name] = []*Review{}
	} else {
		t.Edges.namedTagsReview[name] = append(t.Edges.namedTagsReview[name], edges...)
	}
}

// NamedTagsTopic returns the TagsTopic named value or an error if the edge was not
// loaded in eager-loading with this name.
func (t *Tag) NamedTagsTopic(name string) ([]*Topic, error) {
	if t.Edges.namedTagsTopic == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := t.Edges.namedTagsTopic[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (t *Tag) appendNamedTagsTopic(name string, edges ...*Topic) {
	if t.Edges.namedTagsTopic == nil {
		t.Edges.namedTagsTopic = make(map[string][]*Topic)
	}
	if len(edges) == 0 {
		t.Edges.namedTagsTopic[name] = []*Topic{}
	} else {
		t.Edges.namedTagsTopic[name] = append(t.Edges.namedTagsTopic[name], edges...)
	}
}

// Tags is a parsable slice of Tag.
type Tags []*Tag

func (t Tags) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
