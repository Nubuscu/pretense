// Code generated by ent, DO NOT EDIT.

package tag

const (
	// Label holds the string label denoting the tag type in the database.
	Label = "tag"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldValue holds the string denoting the value field in the database.
	FieldValue = "value"
	// EdgeTagsAlbum holds the string denoting the tags_album edge name in mutations.
	EdgeTagsAlbum = "tags_album"
	// EdgeTagsArtist holds the string denoting the tags_artist edge name in mutations.
	EdgeTagsArtist = "tags_artist"
	// EdgeTagsReview holds the string denoting the tags_review edge name in mutations.
	EdgeTagsReview = "tags_review"
	// EdgeTagsTopic holds the string denoting the tags_topic edge name in mutations.
	EdgeTagsTopic = "tags_topic"
	// Table holds the table name of the tag in the database.
	Table = "tags"
	// TagsAlbumTable is the table that holds the tags_album relation/edge. The primary key declared below.
	TagsAlbumTable = "album_tagged_with"
	// TagsAlbumInverseTable is the table name for the Album entity.
	// It exists in this package in order to avoid circular dependency with the "album" package.
	TagsAlbumInverseTable = "albums"
	// TagsArtistTable is the table that holds the tags_artist relation/edge. The primary key declared below.
	TagsArtistTable = "artist_tagged_with"
	// TagsArtistInverseTable is the table name for the Artist entity.
	// It exists in this package in order to avoid circular dependency with the "artist" package.
	TagsArtistInverseTable = "artists"
	// TagsReviewTable is the table that holds the tags_review relation/edge. The primary key declared below.
	TagsReviewTable = "review_tagged_with"
	// TagsReviewInverseTable is the table name for the Review entity.
	// It exists in this package in order to avoid circular dependency with the "review" package.
	TagsReviewInverseTable = "reviews"
	// TagsTopicTable is the table that holds the tags_topic relation/edge. The primary key declared below.
	TagsTopicTable = "topic_tagged_with"
	// TagsTopicInverseTable is the table name for the Topic entity.
	// It exists in this package in order to avoid circular dependency with the "topic" package.
	TagsTopicInverseTable = "topics"
)

// Columns holds all SQL columns for tag fields.
var Columns = []string{
	FieldID,
	FieldKey,
	FieldValue,
}

var (
	// TagsAlbumPrimaryKey and TagsAlbumColumn2 are the table columns denoting the
	// primary key for the tags_album relation (M2M).
	TagsAlbumPrimaryKey = []string{"album_id", "tag_id"}
	// TagsArtistPrimaryKey and TagsArtistColumn2 are the table columns denoting the
	// primary key for the tags_artist relation (M2M).
	TagsArtistPrimaryKey = []string{"artist_id", "tag_id"}
	// TagsReviewPrimaryKey and TagsReviewColumn2 are the table columns denoting the
	// primary key for the tags_review relation (M2M).
	TagsReviewPrimaryKey = []string{"review_id", "tag_id"}
	// TagsTopicPrimaryKey and TagsTopicColumn2 are the table columns denoting the
	// primary key for the tags_topic relation (M2M).
	TagsTopicPrimaryKey = []string{"topic_id", "tag_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// KeyValidator is a validator for the "key" field. It is called by the builders before save.
	KeyValidator func(string) error
	// ValueValidator is a validator for the "value" field. It is called by the builders before save.
	ValueValidator func(string) error
)
