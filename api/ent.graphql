directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Album implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  by: [Artist!]
  includedIn: [Topic!]
}
type Artist implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  wrote: [Album!]
}
"""
CreateAlbumInput is used for create Album object.
Input was generated by ent.
"""
input CreateAlbumInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  byIDs: [ID!]
  includedInIDs: [ID!]
}
"""
CreateArtistInput is used for create Artist object.
Input was generated by ent.
"""
input CreateArtistInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  wroteIDs: [ID!]
}
"""
CreateReviewInput is used for create Review object.
Input was generated by ent.
"""
input CreateReviewInput {
  createdAt: Time
  updatedAt: Time
  body: String!
  reviewIDs: [ID!]
}
"""
CreateTopicInput is used for create Topic object.
Input was generated by ent.
"""
input CreateTopicInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  reviewedByIDs: [ID!]
  includeIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "nubuscu/pretense/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  albums: [Album!]!
  artists: [Artist!]!
  reviews: [Review!]!
  topics: [Topic!]!
}
type Review implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  body: String!
  reviews: [Topic!]
}
"""The builtin Time type"""
scalar Time
type Topic implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  reviewedBy: [Review!]
  includes: [Album!]
}
"""
UpdateAlbumInput is used for update Album object.
Input was generated by ent.
"""
input UpdateAlbumInput {
  updatedAt: Time
  name: String
  addByIDs: [ID!]
  removeByIDs: [ID!]
  addIncludedInIDs: [ID!]
  removeIncludedInIDs: [ID!]
}
"""
UpdateArtistInput is used for update Artist object.
Input was generated by ent.
"""
input UpdateArtistInput {
  updatedAt: Time
  name: String
  addWroteIDs: [ID!]
  removeWroteIDs: [ID!]
}
"""
UpdateReviewInput is used for update Review object.
Input was generated by ent.
"""
input UpdateReviewInput {
  updatedAt: Time
  body: String
  addReviewIDs: [ID!]
  removeReviewIDs: [ID!]
}
"""
UpdateTopicInput is used for update Topic object.
Input was generated by ent.
"""
input UpdateTopicInput {
  updatedAt: Time
  name: String
  addReviewedByIDs: [ID!]
  removeReviewedByIDs: [ID!]
  addIncludeIDs: [ID!]
  removeIncludeIDs: [ID!]
}
