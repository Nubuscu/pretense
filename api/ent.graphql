directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Album implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  by: [Artist!]
  includedIn: [Topic!]
}
"""A connection to a list of items."""
type AlbumConnection {
  """A list of edges."""
  edges: [AlbumEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type AlbumEdge {
  """The item at the end of the edge."""
  node: Album
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
AlbumWhereInput is used for filtering Album objects.
Input was generated by ent.
"""
input AlbumWhereInput {
  not: AlbumWhereInput
  and: [AlbumWhereInput!]
  or: [AlbumWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """by edge predicates"""
  hasBy: Boolean
  hasByWith: [ArtistWhereInput!]
  """included_in edge predicates"""
  hasIncludedIn: Boolean
  hasIncludedInWith: [TopicWhereInput!]
}
type Artist implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  wrote: [Album!]
}
"""A connection to a list of items."""
type ArtistConnection {
  """A list of edges."""
  edges: [ArtistEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ArtistEdge {
  """The item at the end of the edge."""
  node: Artist
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
ArtistWhereInput is used for filtering Artist objects.
Input was generated by ent.
"""
input ArtistWhereInput {
  not: ArtistWhereInput
  and: [ArtistWhereInput!]
  or: [ArtistWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """wrote edge predicates"""
  hasWrote: Boolean
  hasWroteWith: [AlbumWhereInput!]
}
"""
CreateAlbumInput is used for create Album object.
Input was generated by ent.
"""
input CreateAlbumInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  byIDs: [ID!]
  includedInIDs: [ID!]
}
"""
CreateArtistInput is used for create Artist object.
Input was generated by ent.
"""
input CreateArtistInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  wroteIDs: [ID!]
}
"""
CreateReviewInput is used for create Review object.
Input was generated by ent.
"""
input CreateReviewInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  body: String!
  reviewIDs: [ID!]
}
"""
CreateTopicInput is used for create Topic object.
Input was generated by ent.
"""
input CreateTopicInput {
  createdAt: Time
  updatedAt: Time
  name: String!
  reviewedByIDs: [ID!]
  includeIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "nubuscu/pretense/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  albums(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Albums returned from the connection."""
    where: AlbumWhereInput
  ): AlbumConnection!
  artists(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Artists returned from the connection."""
    where: ArtistWhereInput
  ): ArtistConnection!
  reviews(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Reviews returned from the connection."""
    where: ReviewWhereInput
  ): ReviewConnection!
  topics(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor

    """Returns the first _n_ elements from the list."""
    first: Int

    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor

    """Returns the last _n_ elements from the list."""
    last: Int

    """Filtering options for Topics returned from the connection."""
    where: TopicWhereInput
  ): TopicConnection!
}
type Review implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  body: String!
  reviews: [Topic!]
}
"""A connection to a list of items."""
type ReviewConnection {
  """A list of edges."""
  edges: [ReviewEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type ReviewEdge {
  """The item at the end of the edge."""
  node: Review
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
ReviewWhereInput is used for filtering Review objects.
Input was generated by ent.
"""
input ReviewWhereInput {
  not: ReviewWhereInput
  and: [ReviewWhereInput!]
  or: [ReviewWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """body field predicates"""
  body: String
  bodyNEQ: String
  bodyIn: [String!]
  bodyNotIn: [String!]
  bodyGT: String
  bodyGTE: String
  bodyLT: String
  bodyLTE: String
  bodyContains: String
  bodyHasPrefix: String
  bodyHasSuffix: String
  bodyEqualFold: String
  bodyContainsFold: String
  """reviews edge predicates"""
  hasReviews: Boolean
  hasReviewsWith: [TopicWhereInput!]
}
"""The builtin Time type"""
scalar Time
type Topic implements Node {
  id: ID!
  createdAt: Time!
  updatedAt: Time!
  name: String!
  reviewedBy: [Review!]
  includes: [Album!]
}
"""A connection to a list of items."""
type TopicConnection {
  """A list of edges."""
  edges: [TopicEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}
"""An edge in a connection."""
type TopicEdge {
  """The item at the end of the edge."""
  node: Topic
  """A cursor for use in pagination."""
  cursor: Cursor!
}
"""
TopicWhereInput is used for filtering Topic objects.
Input was generated by ent.
"""
input TopicWhereInput {
  not: TopicWhereInput
  and: [TopicWhereInput!]
  or: [TopicWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """reviewed_by edge predicates"""
  hasReviewedBy: Boolean
  hasReviewedByWith: [ReviewWhereInput!]
  """includes edge predicates"""
  hasIncludes: Boolean
  hasIncludesWith: [AlbumWhereInput!]
}
"""
UpdateAlbumInput is used for update Album object.
Input was generated by ent.
"""
input UpdateAlbumInput {
  updatedAt: Time
  name: String
  addByIDs: [ID!]
  removeByIDs: [ID!]
  addIncludedInIDs: [ID!]
  removeIncludedInIDs: [ID!]
}
"""
UpdateArtistInput is used for update Artist object.
Input was generated by ent.
"""
input UpdateArtistInput {
  updatedAt: Time
  name: String
  addWroteIDs: [ID!]
  removeWroteIDs: [ID!]
}
"""
UpdateReviewInput is used for update Review object.
Input was generated by ent.
"""
input UpdateReviewInput {
  updatedAt: Time
  name: String
  body: String
  addReviewIDs: [ID!]
  removeReviewIDs: [ID!]
}
"""
UpdateTopicInput is used for update Topic object.
Input was generated by ent.
"""
input UpdateTopicInput {
  updatedAt: Time
  name: String
  addReviewedByIDs: [ID!]
  removeReviewedByIDs: [ID!]
  addIncludeIDs: [ID!]
  removeIncludeIDs: [ID!]
}
